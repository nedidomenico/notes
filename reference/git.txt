---------------- some basics ----------------
git reset HEAD file ( which by default is using the --mixed flag) is different in that in the case where the file is already in the repo, it replaces the index version of the file with the one from repo (HEAD), effectively unstaging the modifications to it.
git rm --cached will remove the file from the index, leaving it in the working directory and a commit will now remove it from the repo as well.

Pushing existing repo to github repo:
  git remote add github https://github.com/Nathan-DiDo/CWR.git
  git push -u origin master

git config --global merge.tool meld
git config --global mergetool.meld.path "C:\Program Files (x86)\Meld\Meld.exe"

git checkout experiment -- app.js  
  copy the version of app.js from branch "experiment"

git reset --hard <SOME-COMMIT> 
  Make your current branch (typically master ) back to point at <SOME-COMMIT> .
  Then make the files in your working tree and the index ("staging area") the same as the versions committed in <SOME-COMMIT> .


---------------- Remote Basics ----------------

Showing Your Remotes:
  git remote -v
  
Inspecting a Remote:
  git remote show origin

Adding Remote Repositories:
  git remote add pb https://github.com/paulboone/ticgit

Fetching and Pulling from Your Remotes:
  git fetch [remote-name]

Pushing to Your Remotes:
  git push origin master
  
Removing and Renaming Remotes:
  git remote rename pb paul
  git remote remove paul

---------------- Branch Basics ----------------

Creating a New Branch
  git branch testing
  git checkout -b hotfix

Viewing/Showing Your Branches
  git log --oneline --decorate
  gitk
  git branch
  git branch --no-merged
  git branch --merged

Switching Branches
  git checkout testing


Basic Merging:
  Fast Forward:
    git checkout master
    git checkout -b hotfix
    * do stuff *
    git commit -a -m 'fixed stuff'
    git checkout master
    git merge hotfix
      " Updating f42c576..3a0874c
        Fast-forward.. "
    git branch -d hotfix
  Three-Way:
    $ git checkout master
    Switched to branch 'master'
    $ git merge iss53
    Merge made by the 'recursive' strategy.
    index.html |    1 +
    1 file changed, 1 insertion(+)

Rename your local branch:
  If you are on the branch you want to rename:	
    git branch -m new-name

  If you are on a different branch:
    git branch -m old-name new-name

  Delete the old-name remote branch and push the new-name local branch.
    git push origin :old-name new-name

Reset the upstream branch for the new-name local branch:
  Switch to the branch and then:
    git push origin -u new-name



---------------- Remote Branches ----------------

https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches
Take the form (remote)/(branch)

Remote-tracking branches are references to the state of remote branches. They’re local references that you can’t move; they’re moved automatically for you whenever you do any network communication.

Get a full list of remote references:
  git remote show [remote]
  
Update your remote references
  git fetch origin
  - This command looks up which server “origin” is, fetches any data from it that you don’t yet have, and updates your local database, moving your origin/master pointer to its new, more up-to-date position.

Pushing
  git push <remote> <branch>:
  git push --set-upstream <remote> <branch>
  git branch --set-upstream-to=origin/<branch> gdal-update-232
    If you wish to set tracking information for this branch you can do so with:
  git push origin localfix:awesomebranch 
    to push your local serverfix branch to the awesomebranch 
  - The next time one of your collaborators fetches from the server, they will get a reference to where the server’s version of serverfix is under the remote branch origin/serverfix
  - It’s important to note that when you do a fetch that brings down new remote-tracking branches, you don’t automatically have local, editable copies of them. In other words, in this case, you don’t have a new serverfix branch – you only have an origin/serverfix pointer that youmodify

Tracking Branches
  git checkout -b serverfix origin/serverfix
  git checkout --track origin/serverfix
  git checkout serverfix
    If the branch name you’re trying to checkout (a) doesn’t exist and (b) exactly matches a name on only one remote, Git will create a tracking branch for you.
  git branch -u origin/serverfix
    explicitly set remote branch you’re tracking

Pulling
   git pull will look up what server and branch your current branch is tracking, fetch from that server and then try to merge in that remote branch

Deleting Remote Branches
  git push origin --delete serverfix

Delete Local Branch:
  git branch -d branch_name



---------------- Merge Conflicts ----------------
Use 
  git checkout branchA
  git merge -X theirs branchB
  
Merging:
  $ git merge iss53
  Auto-merging index.html
  CONFLICT (content): Merge conflict in index.html
  Automatic merge failed; fix conflicts and then commit the result.
  
  $ git status
  On branch master
  You have unmerged paths.
    (fix conflicts and run "git commit")
  Unmerged paths:
    (use "git add <file>..." to mark resolution)
      both modified:      index.html
  no changes added to commit (use "git add" and/or "git commit -a")

  $ git mergetool

  After you exit the merge tool, Git asks you if the merge was successful.
  If you tell the script that it was, it stages the file to mark it as resolved for you.
  You can run git status again to verify that all conflicts have been resolved

  type git commit to finalize the merge commit



--------------------- Stash ---------------------
git stash
  without any arguments is equivalent to git stash push

git stash list
  List modifications stashed away by this command

git stash pop
  Remove a single stashed state from the stash list and apply it on top of the current working tree 
  state, i.e., do the inverse operation of git stash push
  
git stash apply
  Like pop, but do not remove the state from the stash list

git stash drop
  Remove a single stash entry from the list of stash entries. When no <stash> is given, it removes
  the latest one. i.e. stash@{0}, otherwise <stash> must be a valid stash log reference of the form
  stash@{<revision>}.



----------------
-------------------------------------------------








