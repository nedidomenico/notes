
Test Docker:
------------
## List Docker CLI commands
docker
docker container --help

## Display Docker version and info
docker --version
docker version
docker info

## Execute Docker image
docker run hello-world

## List Docker images
docker image ls

## List Docker containers (running, all, all in quiet mode)
docker container ls
docker container ls --all
docker container ls -aq

####################################################################################################

Part 2: Containers:
-------------------
docker build -t friendlyhello .  # Create image using this directory's Dockerfile
docker run -p 4000:80 friendlyhello  # Run "friendlyhello" mapping port 4000 to 80
docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode
docker container ls                                # List all running containers
docker container ls -a             # List all containers, even those not running
docker container stop <hash>           # Gracefully stop the specified container
docker container kill <hash>         # Force shutdown of the specified container
docker container rm <hash>        # Remove specified container from this machine
docker container rm $(docker container ls -a -q)         # Remove all containers
docker image ls -a                             # List all images on this machine
docker image rm <image id>            # Remove specified image from this machine
docker image rm $(docker image ls -a -q)   # Remove all images from this machine
docker login             # Log in this CLI session using your Docker credentials
docker tag <image> username/repository:tag  # Tag <image> for upload to registry
docker push username/repository:tag            # Upload tagged image to registry
docker run username/repository:tag                   # Run image from a registry

docker run -p 4000:80 natedid/get-started:part2

Define a container with Dockerfile:
-----------------------------------
Dockerfile defines what goes on in the environment inside your container. Access to resources like networking interfaces and disk drives is virtualized inside this environment, which is isolated from the rest of your system, so you need to map ports to the outside world, and be specific about what files you want to “copy in” to that environment. However, after doing that, you can expect that the build of your app defined in this Dockerfile behaves exactly the same wherever it runs.

The app itself:
---------------
Create two more files, requirements.txt and app.py, and put them in the same folder with the Dockerfile. This completes our app, which as you can see is quite simple. When the above Dockerfile is built into an image, app.py and requirements.txt is present because of that Dockerfile’s COPY command, and the output from app.py is accessible over HTTP thanks to the EXPOSE command.

Build the app:
--------------
Now run the build command. This creates a Docker image, which we’re going to name using the --tag option.
Use -t if you want to use the shorter option.
Where is your built image? It’s in your machine’s local Docker image registry:

Run the app:
------------
You should see a message that Python is serving your app at http://0.0.0.0:80. But that message is coming from inside the container, which doesn’t know you mapped port 80 of that container to 4000, making the correct URL http://localhost:4000.

Now let’s run the app in the background, in detached mode
You get the long container ID for your app and then are kicked back to your terminal. Your container is running in the background. You can also see the abbreviated container ID with docker container ls (and both work interchangeably when running commands):

Share your image:
-----------------
- To demonstrate the portability of what we just created, let’s upload our built image and run it somewhere else. After ll, you need to know how to push to registries when you want to deploy containers to production.
- A registry is a collection of repositories, and a repository is a collection of images.
- Log in with your Docker ID. If you don’t have a Docker account, sign up for one at hub.docker.com. Make note of your username
- The notation for associating a local image with a repository on a registry is username/repository:tag. The tag is optional, but recommended, since it is the mechanism that registries use to give Docker images a version
- Upload your tagged image to the repository



####################################################################################################


Part3:
------
docker stack ls                                            # List stacks or apps
docker stack deploy -c <composefile> <appname>  # Run the specified Compose file
docker service ls                 # List running services associated with an app
docker service ps <service>                  # List tasks associated with an app
docker inspect <task or container>                   # Inspect task or container
docker container ls -q                                      # List container IDs
docker stack rm <appname>                             # Tear down an application
docker swarm leave --force      # Take down a single node swarm from the manager

Be sure your image works as a deployed container.
Run this command, slotting in your info for username, repo, and tag:
docker run -p 4000:80 username/repo:tag  ->  docker run -p 4000:80 natedid/get-started:part2
then visit http://localhost:4000/

Docker Services:
---------------
Services are really just “containers in production.” A service only runs one image, but it codifies the way that image runs—what ports it should use, how many replicas of the container should run so the service has the capacity it needs, and so on. Scaling a service changes the number of container instances running that piece of software, assigning more computing resources to the service in the process.

Your docker-compose.yml file:
-----------------------------
A docker-compose.yml file is a YAML file that defines how Docker containers should behave in production.
This docker-compose.yml file tells Docker to do the following:
  - Pull the image we uploaded in step 2 from the registry.
  - Run 5 instances of that image as a service called web, limiting each one to use, at most, 10% of a single
      core of CPU time (this could also be e.g. “1.5” to mean 1 and half core for each), and 50MB of RAM.
  - Immediately restart containers if one fails.
  - Map port 4000 on the host to web’s port 80.
  - Instruct web’s containers to share port 80 via a load-balanced network called webnet. (Internally, the
      containers themselves publish to web’s port 80 at an ephemeral port.)
  - Define the webnet network with the default settings (which is a load-balanced overlay network).

Run your new load-balanced app:
-------------------------------
- Get the service ID for the one service in our application
- Look for output for the web service, prepended with your app name. If you named it the same as shown in
  this example, the name is getstartedlab_web. The service ID is listed as well, along with the number of
  replicas, image name, and exposed ports.
- A single container running in a service is called a task. Tasks are given unique IDs that numerically
  increment, up to the number of replicas you defined in docker-compose.yml. List the tasks for your service:

Scale the app:
--------------
You can scale the app by changing the replicas value in docker-compose.yml, saving the change, and re-running
the docker stack deploy command:


Take down the app and the swarm:
--------------------------------
Take the app down with docker stack rm:
  docker stack rm getstartedlab
Take down the swarm.
  docker swarm leave --force

It’s as easy as that to stand up and scale your app with Docker. You’ve taken a huge step towards learning how
to run containers in production. Up next, you learn how to run this app as a bonafide swarm on a cluster of
Docker machines.


####################################################################################################


Part4:
------

docker-machine create --driver virtualbox myvm1 # Create a VM (Mac, Win7, Linux)
docker-machine create -d hyperv --hyperv-virtual-switch "myswitch" myvm1 # Win10
docker-machine env myvm1                # View basic information about your node
docker-machine ssh myvm1 "docker node ls"         # List the nodes in your swarm
docker-machine ssh myvm1 "docker node inspect <node ID>"        # Inspect a node
docker-machine ssh myvm1 "docker swarm join-token -q worker"   # View join token
docker-machine ssh myvm1   # Open an SSH session with the VM; type "exit" to end
docker node ls                # View nodes in swarm (while logged on to manager)
docker-machine ssh myvm2 "docker swarm leave"  # Make the worker leave the swarm
docker-machine ssh myvm1 "docker swarm leave -f" # Make master leave, kill swarm
docker-machine ls # list VMs, asterisk shows which VM this shell is talking to
docker-machine start myvm1            # Start a VM that is currently not running
docker-machine env myvm1      # show environment variables and command for myvm1
eval $(docker-machine env myvm1)         # Mac command to connect shell to myvm1
& "C:\Program Files\Docker\Docker\Resources\bin\docker-machine.exe" env myvm1 | Invoke-Expression   # Windows command to connect shell to myvm1
docker stack deploy -c <file> <app>  # Deploy an app; command shell must be set to talk to manager (myvm1), uses local Compose file
docker-machine scp docker-compose.yml myvm1:~ # Copy file to node's home dir (only required if you use ssh to connect to manager and deploy the app)
docker-machine ssh myvm1 "docker stack deploy -c <file> <app>"   # Deploy an app using ssh (you must have first copied the Compose file to myvm1)
eval $(docker-machine env -u)     # Disconnect shell from VMs, use native docker
docker-machine stop $(docker-machine ls -q)               # Stop all running VMs
docker-machine rm $(docker-machine ls -q) # Delete all VMs and their disk images



Understanding Swarm clusters:
-----------------------------
A swarm is a group of machines that are running Docker and joined into a cluster. After that has happened, you continue to run the Docker commands you’re used to, but now they are executed on a cluster by a swarm manager. The machines in a swarm can be physical or virtual. After joining a swarm, they are referred to as nodes.

Swarm managers can use several strategies to run containers, such as “emptiest node” -- which fills the least utilized machines with containers. Or “global”, which ensures that each machine gets exactly one instance of the specified container. You instruct the swarm manager to use these strategies in the Compose file, just like the one you have already been using.

Swarm managers are the only machines in a swarm that can execute your commands, or authorize other machines to join the swarm as workers. Workers are just there to provide capacity and do not have the authority to tell any other machine what it can and cannot do.

Up until now, you have been using Docker in a single-host mode on your local machine. But Docker also can be switched into swarm mode, and that’s what enables the use of swarms. Enabling swarm mode instantly makes the current machine a swarm manager. From then on, Docker runs the commands you execute on the swarm you’re managing, rather than just on the current machine.























































































































































=============================== FOOTNOTES ===============================

Stop all containers:
--------------------
docker container stop `docker container ls -a | awk 'FNR ==1 {next} {print $1};' | tr "\n" ' '`
docker container ls | awk 'FNR==1{next};{print $1};' | tr "\n" " "

Runtime:
--------
Runtime describes software/instructions that are executed while your program is running, especially those
instructions that you did not write explicitly, but are necessary for the proper execution of your code.
Low-level languages like C have very small (if any) runtime. More complex languages like Objective-C, which
allows for dynamic message passing, have a much more extensive runtime.
You are correct that runtime code is library code, but library code is a more general term, describing the
code produced by any library. Runtime code is specifically the code required to implement the features of the
language itself.
