Possable Volans Metrics

Where-In-Code:

A Metric that reports (Which / How Many / When ):


com.ccri.volans.concurrent  VolansConsumer.scala:
  - Consumers / Threads are started and stopped
  - Chip group are successfully processed

com.ccri.volans.concurrent  VolansDrainer.scala:
  - Queue drainer / Thread are started and stopped

com.ccri.volans.features.writers CnnGeoToolsWriter.scala:
  - SFTs are created
  - SFTs are persisted into a data store

com.ccri.volans.features.writers CnnGeoToolsWriterTest.scala **

com.ccri.volans.imagery.cnn CnnChipProducer.scala: *
  - Tile are processed
  - Chip counter
  - Number of Consumers

com.ccri.volans.imagery.cnn.training Dl4jModelAverager.scala: *
  - Models are run
  - Models are scored

com.ccri.volans.imagery.cnn.training TrainingWorker.scala:
  - Score on Thread
  - Training time on thread

com.ccri.volans.imagery.dl4j Dl4jBasicChipConsumer
  - Processing $nChips in thread $threadName
  - Chip Creation Rate (chips/sec) = $chipRate
  - INDArray Creation Rate (chips/sec) = $ndRate
  - Classification Rate (chips/sec) = $classRate
  - Scoring Rate (chips/sec) = $scoreRate
  - Package Rate (chips/sec) = $packRate
  - Consume Rate (chips/sec) = $consumeRate
  - Group successfully processed : thread-metadata

com.ccri.volans.imagery.dl4j Dl4jFramework **

com.ccri.volans.imagery.io CvImageReader **

com.ccri.volans.imagery.postprocessing GeotoolsConfigUtils.scala
  - Which filters are active

com.ccri.volans.imagery.postprocessing.clustering CascadedUnionClustering.scala
  - Active clustering processes running
  - Number of non-zero chips:  ${nonZeroChipInfo.size}
  - Number of cluster geometries:  ${clusterGeoms.size}
  - Number of cluster member map entries:  ${clusterMembers.size}
  - Number of groups:  ${groups.size}
  - Number of group-map entries:  ${groupMap.size}
  - Clusters Identified [ metadata: cluster IDs ]
  - Active clustering persistence processes running
  - Cluster SFTs put in the data store

com.ccri.volans.imagery.postprocessing.clustering Clustering.scala
  - Beginning post-process clustering for $imageUri
  - Completed post-process clustering for $imageUri

com.ccri.volans.imagery.postprocessing.clustering DBScanClustering.scala
  - Active clustering processes are running
  - Clusters are detected
  - SFTs are written to data store

com.ccri.volans.imagery.sensor_model GeoModel.scala
  - DTEDs are found

com.ccri.volans.natives NativeLoader.scala **

com.ccri.volans.tools BasicInferenceListener.scala
  - Images are processed
  - Detections are detected
  - Chips are processed
  - Image are ignored because it does not have required sensor model

com.ccri.volans.tools BasicInferenceSingle.scala
  - Images are processed
  - Detections are detected
  - Chips are processed
  - Image not processed

com.ccri.volans.tools BasicPytorchInferenceSingle.scala
  - Images are processed
  - Detections are detected
  - Chips are processed
  - Image not processed

com.ccri.volans.tools BasicTraining.scala
  - Models are scored on each dataset

com.ccri.volans.tools ImageChipper.scala
  - Tiles are processed
  - chip workers are busy
  - chip writers are busy
  - chip batches are queued
  - images are chipped
  - chips are made

com.ccri.volans.tools ImageVectorizer.scala
  - Tiles are processed
  - chip workers are busy
  - chip vectorizers are busy
  - chip batches are queued
  - images are chipped
  - chips are made

com.ccri.volans.tools SendTrainingChipMessages.scala
  - messages are sent for images

com.ccri.volans.tools.callbacks S3DownloadAndProcess.scala
  - messages are processed
  - files are downloaded

com.ccri.volans.tools.chipping CnnChipperPool.scala **

com.ccri.volans.tools.pipeline BasicChippingPipeline.scala
  - Tiles are processed
  - chip workers are busy
  - chips are made

com.ccri.volans.tools.pipeline BasicInferencePipeline.scala ( I didn't feel like rephrasing these)
  - Number of tiles left to process: ${tileCounter.get}
  - Number of busy chip workers: ${chippingBlocker.get}
  - Number of busy chip classifiers: ${processingBlocker.get}
  - Number of chip batches in the queue: ${chipSink.size()}
  - Number of detections in the queue: ${detectQueue.size}
  - Seconds since last update: $secondsSinceLastUpdate
  - Processing is stuck.  Terminating process immediately.

com.ccri.volans.tools.pipeline BasicPytorchInferencePipeline.scala
  - Number of tiles left to process: ${tileCounter.get}
  - Number of busy chip workers: ${chippingBlocker.get}
  - Number of busy chip classifiers: ${processingBlocker.get}
  - Number of chip batches in the queue: ${chipSink.size()}
  - Number of detections in the queue: ${detectQueue.size}

com.ccri.volans.tools.training TrainingChipMaker.scala
  - Images are rectified
  - Images are found
  - Images are downloaded


com.ccri.volans.tools.training TrainingChipS3Writer.scala
  - Writing training chip to $localFile
  - Putting training chip ${localFile.getName} in bucket ${s3ConfigParams.bucket} with key $s3Key
  - Writing random chip to $localFile
  - Putting random chip ${localFile.getName} in bucket ${s3ConfigParams.bucket} with key $s3Key

com.ccri.volans.tools.utils FeatureConfigParamsTest.scala **


* there might be more metrics necessary here
** there were logger.info calls but I decided not to have any metrics in this file
    - ChipperPool calls ChipperProducer to start up chippers (or something like that) so where do we have the metric of how many chippers are up?
==========================================================================================================

